Plant(
		//global plant signals
		input signal enable,refill;
		//Caploader
		input signal pusherExtend,vacOn,armSource,armDest, cylPos5ZAxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend;
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		
		//Conveyor
		input signal motConveyorOn, bottleAdded, putBottleAt5_FV;
		
		output signal motConveyorOnE, bottleAtPos1, bottleAtPos1E, bottleAtPos5, bottleLeftPos5, bottleAtPos5E;
		
		//Rotary Table
		input signal rotaryTableTrigger;
		
		output signal rotaryTableTriggerE, bottleAtPos1_RT;
		
		//Filler
		input signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend;
		
		output signal valveInjectorOnOffE,valveInletOnOffE,dosUnitValveRetractE,dosUnitValveExtendE;
		)
->
{
	class GUI implements java.lang.Runnable {
		public void run() {
			org.compsys704.CapLoader.main(null);
		}
	}
	new Thread(new GUI()).start();

	signal capDec;
	signal l_bottleAdded;
	int signal capPos;
	emit capPos(0);
	{// Arm
		while(true){
			abort(armSource && enable){
				sustain armAtDest;
			}
			await(!enable);
			abort(armDest && enable){
				sustain armAtSource;
			}
			await(!enable);
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend && enable){
				sustain pusherRetracted;
			}
			await(!enable);
			abort(!pusherExtend && enable){
				sustain pusherExtended;
			}
			await(!enable);
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		int capcount = 5;
		while(true){
			present(capDec){
				if(capcount > 0)
					capcount--;
			}
			present(refill){
				capcount = 5;
			}
//			present(pusherRetracted){
				if(capcount == 0)
					emit empty;
//			}
			pause;
		}
	}
	||
//Conveyer starts here
	{
		signal s_motConveyorOn;
		while(true) {
			pause;
			{
				await(l_bottleAdded && enable && motConveyorOn);
				abort(rotaryTableTrigger && enable){
					sustain bottleAtPos1;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(bottleAdded){
				abort(enable && !bottleAdded){
					sustain l_bottleAdded;
				}
			}
		} 
	}
	||
	{
		while(true) {
			pause;
			present(putBottleAt5_FV){
				abort((enable && !putBottleAt5_FV) || bottleLeftPos5){
					sustain bottleAtPos5;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(bottleAtPos5 && motConveyorOn && enable){//might not need enable
				await(!enable);
				sustain bottleLeftPos5;
			}
		}
	}
//Conveyer end
	||
	//Rotary Table start
	{
		while(true) {
			pause;
//			abort(!rotaryTableTrigger && enable){
//				sustain rotaryTableTriggerE;
//			}
		}
	}
	//Rotary Table end
	||
	//Filler start
	
	{
		signal s_valveInjectorOnOff;
		while(true) {
			pause;
//			abort(!valveInjectorOnOff && enable){
//				sustain valveInjectorOnOffE;
//			}
		}
		
	}
	||
	{
		while(true) {
			pause;
//			abort(!valveInletOnOff && enable){
//				sustain valveInletOnOffE;
//			}
		}
		
	}
	||
	{
		while(true) {
			pause;
//			abort(!dosUnitValveRetract && enable){
//				sustain dosUnitValveRetractE;
//			}
		}
		
	}
	||
	{
		while(true) {
			pause;
//			abort(!dosUnitValveExtend && enable){
//				sustain dosUnitValveExtendE;
//			}
		}
		
	}
	||
	{// To viz
		//Caploader
//		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
//		||
//		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
//		||
//		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
//		||
//		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
//		||
//		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
//		||
		{while(true){present(bottleAtPos1){emit bottleAtPos1E;} pause;}}
		||
		{while(true){present(motConveyorOn){emit motConveyorOnE;} pause;}}
		||
		{while(true){present(rotaryTableTrigger){emit rotaryTableTriggerE;} pause;}}
		||
		{while(true){present(bottleAtPos1 && enable){await(!enable);  await(enable); emit bottleAtPos1_RT;} pause;}}
		||
		{while(true){present(bottleAtPos5 && enable){await(!enable);  await(enable); emit bottleAtPos5E;} pause;}}

	}
}
