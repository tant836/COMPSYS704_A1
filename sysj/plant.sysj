Plant(
		//global plant signals
		input signal enable,refill, removeBottle;
		
		output signal pusherExtendE, vacOnE, armSourceE, armDestE, bottleAtPos3, bottleAtPos3E;
		
		//Conveyor
		input signal motConveyorOn, bottleAdded;
		
		output signal motConveyorOnE, bottleAtPos1, bottleAtPos1E, bottleAtPos5,bottleAtPos5_RT, bottleLeftPos5, bottleAtPos5E, bottleLeftPos5E, bottleAtPos2E, bottleAtPos4E, bottleAtPos2, bottleAtPos4;
		
		//Rotary Table
		input signal rotaryTableTrigger;
		
		output signal rotaryTableTriggerE, bottleAtPos1_RT, capOnBottleAtPos1E, capOnBottleAtPos1, tableAlignedWithSensor;
		
		//capper 
		input signal cylPos5ZaxisExtend;
		output signal cylPos5ZaxisExtendE, gripperTurnRetractE, gripperTurnExtendE, capGripperPos5ExtendE, cylClampBottleExtendE;
		
		//Caploader
		input signal pusherExtend,vacOn,armSource,armDest, cylPos5ZAxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend;
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		output signal gripperZAxisLoweredE, gripperTurnFinalPosE, gripperTurnHomePosE, gripperZAxisLiftedE;
		output signal gripperZAxisLowered, gripperTurnFinalPos, gripperTurnHomePos, gripperZAxisLifted;
		
		//Filler
		input signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend, turnNozTrigger;
		
		output signal valveInjectorOnOffE,valveInletOnOffE,dosUnitValveRetractE,dosUnitValveExtendE, dosUnitFilledE, dosUnitEvacE, dosUnitEvac, dosUnitFilled,noz1,noz2,noz3,noz4;
		output signal noz1E, noz2E, noz3E, noz4E, bottleAddedC, bottleAtPos4_RT, bottleAtPos3_RT, bottleAtPos2_RT;
		)
->
{
	class GUI implements java.lang.Runnable {
		public void run() {
			org.compsys704.GUI.main(null);
		}
	}
	new Thread(new GUI()).start();

	signal capDec;
	signal l_bottleAdded;
	signal l_putBottleAt5, l_putBottleAt4, l_putBottleAt2, l_putBottleAt3;
	int signal capPos;
	emit capPos(0);
	
	{// Arm
		while(true){
			abort(armSource && enable){
				sustain armAtDest;
			}
			await(!enable);
			abort(armDest && enable){
				sustain armAtSource;
			}
			await(!enable);
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend && enable){
				sustain pusherRetracted;
			}
			await(!enable);
			abort(!pusherExtend && enable){
				sustain pusherExtended;
			}
			await(!enable);
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		int capcount = 5;
		while(true){
			present(capDec){
				if(capcount > 0)
					capcount--;
			}
			present(refill){
				capcount = 5;
			}
//			present(pusherRetracted){
				if(capcount == 0)
					emit empty;
//			}
			pause;
		}
	}
	||
//Conveyer starts here
	{
		signal s_motConveyorOn;
		while(true) {
			pause;
			{
				await(l_bottleAdded && enable && motConveyorOn);
				abort(rotaryTableTrigger && enable){
					sustain bottleAtPos1;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(bottleAdded){
				abort(enable && !bottleAdded){
					sustain l_bottleAdded;
				}
			}
		} 
	}
	||
	{
		while(true) {
			pause;
			present(l_putBottleAt5){
				abort(bottleLeftPos5){
					sustain bottleAtPos5;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(l_putBottleAt4){
				abort((bottleAtPos5)){
					await(!enable);
					sustain bottleAtPos4;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(l_putBottleAt2){
				abort((bottleAtPos3)){
					await(!enable);
					sustain bottleAtPos2;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(l_putBottleAt3){
				abort((bottleAtPos4)){
					await(!enable);
					sustain bottleAtPos3;
				}
			}
		}
	}
	||
	{
		while(true) {
			pause;
			present(bottleAtPos5 && motConveyorOn && enable){//might not need enable
				await(!enable);
				emit bottleLeftPos5;
			}
		}
	}
//Conveyer end
	||
	//Rotary Table start
	{
		int numTurns = 0;
		while(true) {
			pause;
			emit tableAlignedWithSensor;
			present(rotaryTableTrigger && enable){
				await(!enable);
				numTurns++;
				if(numTurns == 2) {
					emit l_putBottleAt2;
					abort(rotaryTableTrigger){
						sustain tableAlignedWithSensor;
					}
				}else if(numTurns == 3) {
					emit l_putBottleAt3;
					abort(rotaryTableTrigger){
						sustain tableAlignedWithSensor;
					}
					
				}else if(numTurns == 4 ) {
					emit l_putBottleAt4;
					abort(rotaryTableTrigger){
						sustain tableAlignedWithSensor;
					}
				}else if(numTurns == 5) {
					numTurns = 0;
					emit l_putBottleAt5;
					await(!rotaryTableTrigger);
				}
			}
		}
	}
	||
	{
		Integer chance = 25;
		Integer rand;
		while(true) {
			pause;
			
			present(bottleAtPos1){
				rand = (int)(Math.random() * 100);
				System.out.println(rand);
				if(rand < chance) {
					abort(removeBottle){
							sustain capOnBottleAtPos1;
					}
					
				}
				await(enable);
				await(!enable);
			}
		}
	}
	//Rotary Table end
	||
	//capper
	{
		while(true) {//lower gripper
			pause;
			present(cylPos5ZAxisExtend && enable){
				await(!enable);
				abort(!cylPos5ZAxisExtend){
					sustain gripperZAxisLowered;
				}
			}
		}
	}
	||
	{
		while(true) {//twist the gripper
			pause;
			present(gripperTurnExtend && enable && !gripperTurnRetract){
				await(!enable);
				abort(!gripperTurnExtend && gripperTurnRetract && enable){
					sustain gripperTurnFinalPos;
				}
			}
		}
	}
	||
	{
		while(true) {//un-twist the gripper
			pause;
			present(gripperTurnRetract && enable && !gripperTurnExtend){
				await(!enable);
				abort(!gripperTurnRetract && gripperTurnExtend && enable){
					sustain gripperTurnHomePos;
				}
			}
		}
	}
	||
	{
		while(true) {//raise the gripper
			pause;
			present(!cylPos5ZAxisExtend){
				abort(cylPos5ZAxisExtend){
					sustain gripperZAxisLifted;
				}
			}
		}
	}
	
	//end capper
	
	||
	//start Filler
	{
		abort(dosUnitValveRetract || dosUnitValveExtend){
			sustain dosUnitEvac;
		}
		while(true) {//extend pressure cannister
			pause;
			present(dosUnitValveExtend && enable && valveInletOnOff){
				await(!enable);
				abort(!dosUnitValveExtend && dosUnitValveRetract && enable){
					sustain dosUnitEvac;
				}
			}
		}
	}
	||
	{
		while(true) {//retract the pressure cannister
			pause;
			present(dosUnitValveRetract && enable && valveInjectorOnOff){
				await(!enable);
				abort(!dosUnitValveRetract && dosUnitValveExtend && enable){
					sustain dosUnitFilled;
				}
			}
		}
	}
	||
	{
		//Filler nozzle control
		Integer signal s_nozzlenum;
		{
			int nozzlenum = 0;
			
			while(true) {
				pause;
				present(turnNozTrigger && enable){
					await(!enable);
					nozzlenum++;
					if(nozzlenum > 4) {
						nozzlenum = 0;
					}
					abort(turnNozTrigger && enable){
						sustain s_nozzlenum(nozzlenum);
					}
//					System.out.println(nozzlenum);
//					if(nozzlenum == 1) {
//						sustain noz1;
//					}else if(nozzlenum == 2) {
//						sustain noz2;
//					}else if(nozzlenum == 3) {
//						sustain noz3;
//					}else {
//						sustain noz4;
//						nozzlenum = 0;
//					}
				}
			}
		}
		||
		{
			while(true) {
				pause;
				await(s_nozzlenum);
				if(#s_nozzlenum == 1) {
					abort(!s_nozzlenum){
						sustain noz1;
					}
					
				}
			}
		}
		||
		{
			while(true) {
				pause;
				await(s_nozzlenum);
				if(#s_nozzlenum == 2) {
					abort(!s_nozzlenum){
						sustain noz2;
					}
				}
			}
		}
		||
		{
			while(true) {
				pause;
				await(s_nozzlenum);
				if(#s_nozzlenum == 3) {
					abort(!s_nozzlenum){
						sustain noz3;
					}
				}
			}
		}
		||
		{
			while(true) {
				pause;
				await(s_nozzlenum);
				if(#s_nozzlenum == 4) {
					abort(!s_nozzlenum){
						sustain noz4;
					}
				}
			}
		}
	}
	||
	//end Filler
	{// To viz
		//Caploader
//		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
//		||
//		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
//		||
//		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
//		||
//		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
//		||
//		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
//		||
		{while(true){present(bottleAtPos1){emit bottleAtPos1E;} pause;}}
		||
		{while(true){present(motConveyorOn){emit motConveyorOnE;} pause;}}
		||
		{while(true){present(rotaryTableTrigger){emit rotaryTableTriggerE;} pause;}}
		||
		{while(true){present(bottleAtPos1 && enable){await(!enable);  await(enable); emit bottleAtPos1_RT;} pause;}}
		||
		{while(true){present(bottleAtPos2){emit bottleAtPos2_RT;} pause;}}
		||
		{while(true){present(bottleAtPos3){emit bottleAtPos3_RT;} pause;}}
		||
		{while(true){present(bottleAtPos4){emit bottleAtPos4_RT;} pause;}}
		||
		{while(true){present(bottleAtPos5 || l_putBottleAt5){emit bottleAtPos5E;} pause;}}
		||
		{while(true){
			present(bottleLeftPos5){
				await(!enable);
				abort(enable){
					sustain bottleLeftPos5E; 
				}
			}
			pause;
		}
		}
		||
		{while(true){present(bottleAtPos5 && enable){await(!enable);  await(enable); emit bottleAtPos5_RT;} pause;}}
		||
		{while(true){present(bottleAtPos4){emit bottleAtPos4E;} pause;}}
		||
		{while(true){present(bottleAtPos2){emit bottleAtPos2E;} pause;}}
		||
		{while(true) {present(gripperZAxisLowered){emit gripperZAxisLoweredE;} pause;}}
		||
		{while(true) {present(gripperTurnFinalPos){emit gripperTurnFinalPosE;} pause;}}
		||
		{while(true) {present(gripperTurnHomePos){emit gripperTurnHomePosE;} pause;}}
		||
		
		{while(true) {present(gripperZAxisLifted){emit gripperZAxisLiftedE;} pause;}}
		||
		{while(true) {present(cylPos5ZaxisExtend){emit cylPos5ZaxisExtendE;} pause;}}
		||
		{while(true) {present(gripperTurnRetract){emit gripperTurnRetractE;} pause;}}
		||
		{while(true) {present(gripperTurnExtend){emit gripperTurnExtendE;} pause;}}
		||
		{while(true) {present(capGripperPos5Extend){emit capGripperPos5ExtendE;} pause;}}
		||
		{while(true) {present(cylClampBottleExtend){emit cylClampBottleExtendE;} pause;}}
		
		||
		{while(true) {present(valveInjectorOnOff){emit valveInjectorOnOffE;} pause;}}
		||
		{while(true) {present(valveInletOnOff){emit valveInletOnOffE;} pause;}}
		||
		{while(true) {present(dosUnitValveRetract){emit dosUnitValveRetractE;} pause;}}
		||
		{while(true) {present(dosUnitValveExtend){emit dosUnitValveExtendE;} pause;}}
		||
		{while(true) {present(bottleAtPos2){emit bottleAtPos2E;} pause;}}
		||
		{while(true) {present(dosUnitEvac){emit dosUnitEvacE;} pause;}}
		||
		{while(true) {present(dosUnitFilled){emit dosUnitFilledE;} pause;}}

		
		||
		{while(true) {present(capOnBottleAtPos1){emit capOnBottleAtPos1E;} pause;}}
		||
		{while(true) {present(noz1){emit noz1E;} pause;}}
		||
		{while(true) {present(noz2){emit noz2E;} pause;}}
		||
		{while(true) {present(noz3){emit noz3E;} pause;}}
		||
		{while(true) {present(noz4){emit noz4E;} pause;}}
		||
		{while(true) {present(bottleAdded){emit bottleAddedC;} pause;}}

	}
	||
	{// Arm
		while(true){
			abort(armSource && enable){
				sustain armAtDest;
			}
			await(!enable);
			abort(armDest && enable){
				sustain armAtSource;
			}
			await(!enable);
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend && enable){
				sustain pusherRetracted;
			}
			await(!enable);
			abort(!pusherExtend && enable){
				sustain pusherExtended;
			}
			await(!enable);
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		int capcount = 5;
		while(true){
			present(capDec){
				if(capcount > 0)
					capcount--;
			}
			present(refill){
				capcount = 5;
			}
//			present(pusherRetracted){
				if(capcount == 0)
					emit empty;
//			}
			pause;
		}
	}
	||
	{// To viz
		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
		||
		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
		||
		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
		||
		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
		||
		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
		||
		{while(true){present(empty){emit emptyE;} pause;}}
		||
		
		{while(true){present(pusherExtend){emit pusherExtendE;} pause;}}
		||
		{while(true){present(vacOn){emit vacOnE;} pause;}}
		||
		{while(true){present(armSource){emit armSourceE;} pause;}}
		||
		{while(true){present(armDest){emit armDestE;} pause;}}
		||
		{while(true){present(bottleAtPos3){emit bottleAtPos3E;} pause;}}
	}
}
