Conveyor(
		input signal bottleAtPos1, bottleLeftPos5, bottleAtPos5;
		output signal motConveyorOn;
		)
->{
/* TODO: Write control-logic */
	
	loop {
		pause;
		await(!bottleLeftPos5);
		abort(bottleAtPos1){
			sustain motConveyorOn;
		}
		await(bottleAtPos5);
		abort(bottleLeftPos5){
			sustain motConveyorOn;
		}
	}
	

}

RotaryTable(
		input signal tableAlignedWithSensor, bottleAtPos5, capOnBottleAtPos1, bottleAtPos1, doneAtPos2, doneAtPos4, doneAtPos3;
		output signal rotaryTableTrigger;
		)
->{
/* TODO: Write control-logic */
	//My change is logic good?
	loop{
		pause;
		await(bottleAtPos1);
		await(!capOnBottleAtPos1);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		await(doneAtPos2);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		await(doneAtPos3);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		await(doneAtPos4);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		
		
//				abort(tableAlignedWithSensor){
//					sustain rotaryTableTrigger;
//				}
	}

}

Capper(
		input signal bottleAtPos4, gripperZAxisLowered, gripperZAxisLifted, gripperTurnHomePos, gripperTurnFinalPos;
		output signal cylPos5ZAxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend, doneAtPos4;
		)
->{
/* TODO: Write control-logic */
	
	loop{
		pause;
		await(bottleAtPos4);
		abort(gripperZAxisLowered){//clamp and lower gripper until gripper is fully lowered
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
		}
		
		abort(gripperTurnFinalPos){//steps 3 & 4
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
			||
			{
				sustain capGripperPos5Extend;//grip the cap with gripper
			}
			||
			{
				sustain gripperTurnExtend;//twist the gripper
			}
		}
		
		abort(gripperTurnHomePos){//steps 5 & 6
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
			||
			{
				sustain gripperTurnRetract;//twist the gripper
			}
		}
		
		abort(gripperZAxisLifted){
			sustain cylClampBottleExtend;//clamp bottle
		}
		
		emit doneAtPos4;
		await(!bottleAtPos4);
	}

}

Filler(
		input signal bottleAtPos2, dosUnitEvac, dosUnitFilled;
		input signal noz1,noz2,noz3,noz4;
		input Integer signal sentliquid;
		input signal bottleAdded;

		output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend, turnNozTrigger, doneAtPos2, requestliquid;
		)
->{
	signal doneFilling, doneAllLiquids, nozzlePlaced, doneAtPos2_L;
	
/* TODO: Write control-logic */
	{
	loop{
		Integer liquidval;
		pause;
		await(bottleAdded);
		abort (sentliquid){
			loop{
				emit requestliquid;
				pause;
				pause;
			}
			
		}
		
		liquidval = (int)#sentliquid;
		
		System.out.println("receive liquidBuffer");
			if((liquidval & (1 << 0)) != 0) {
				
					abort(noz1){
						sustain turnNozTrigger;
					}
					abort(doneFilling){
						sustain nozzlePlaced;
					}
			}
			
			if((liquidval & (1 << 1)) != 0){
					abort(noz2){
						sustain turnNozTrigger;
					}
					abort(doneFilling){
						sustain nozzlePlaced;
					}
			}
			System.out.println("-- 1");
			if((liquidval & (1 << 2)) != 0){
				System.out.println("-- 2");
					abort(noz3){
						sustain turnNozTrigger;
					}
					System.out.println("-- 3");
					abort(doneFilling){
						sustain nozzlePlaced;
					}
					System.out.println("-- 4");
			}
			System.out.println("-- 5");
			if((liquidval & (1 << 3)) != 0){
					abort(noz4){
						sustain turnNozTrigger;
					}
					abort(doneFilling){
						sustain nozzlePlaced;
					}
			}
			System.out.println("-- 6");
			abort(doneAtPos2_L){
				sustain doneAllLiquids;
			}
			System.out.println("-- 7");
		}
	}
	||
	{
		loop{
			pause;
			await(doneAllLiquids || nozzlePlaced);
			present(doneAllLiquids){
				System.out.println("-- 21");
					{
						emit doneAtPos2;
						await(!bottleAtPos2);
					}
					||
					{
						emit doneAtPos2_L;
					}
			}
			
			System.out.println("-- 19");
			
			abort(!bottleAtPos2){
			present(bottleAtPos2){
			abort(dosUnitFilled){
				{sustain valveInjectorOnOff;}
				||
				{
					present(dosUnitEvac){
						sustain dosUnitValveRetract;
					}
				}
				
			}
			
			abort(dosUnitEvac){
				{sustain valveInletOnOff;}
				||
				{
					sustain dosUnitValveExtend;
				}
			}
			
			emit doneFilling;
			
		}
			}
		}
	}
}

CapLoader(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherExtend,vacOn,armSource,armDest, doneAtPos3;
		input signal bottleAtPos3;
		)
->{
/* TODO: Write control-logic */
	
	loop{
		
			pause;
			await(!empty);
			await(bottleAtPos3);
			abort(armAtDest){
				sustain armDest;
			}
			
			abort(pusherExtended){
				sustain pusherExtend;
			}
			
			await(pusherRetracted);
			
			abort(armAtSource){
				sustain armSource;
			}
			
			abort(WPgripped){
				sustain vacOn;
			}
			
			abort(armAtDest){
				{sustain vacOn;}||{sustain armDest;}
			}
			
			await(!WPgripped);
			
			abort(armAtSource){
				sustain armSource;
			}
			
			emit doneAtPos3;
			await(!bottleAtPos3);
	}
}