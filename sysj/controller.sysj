import systemj.util.FIFO;
Conveyor(
		input signal bottleAtPos1, bottleLeftPos5, bottleAtPos5;
		output signal motConveyorOn;
		)
->{
/* TODO: Write control-logic */
	
	loop {
		pause;
		await(!bottleLeftPos5);
		abort(bottleAtPos1){
			sustain motConveyorOn;
		}
		await(bottleAtPos5);
		abort(bottleLeftPos5){
			sustain motConveyorOn;
		}
	}
	

}

RotaryTable(
		input signal tableAlignedWithSensor, bottleAtPos5, capOnBottleAtPos1, bottleAtPos1, doneAtPos2, doneAtPos4;
		output signal rotaryTableTrigger;
		)
->{
/* TODO: Write control-logic */
	//My change is logic good?
	loop{
		pause;
		await(bottleAtPos1);
		await(!capOnBottleAtPos1);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		await(doneAtPos2);
		await(!doneAtPos2);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		await(doneAtPos4);
		await(!doneAtPos4);
		abort(bottleAtPos5 || tableAlignedWithSensor){
			sustain rotaryTableTrigger;
		}
		
		
//				abort(tableAlignedWithSensor){
//					sustain rotaryTableTrigger;
//				}
	}

}

Capper(
		input signal bottleAtPos4, gripperZAxisLowered, gripperZAxisLifted, gripperTurnHomePos, gripperTurnFinalPos;
		output signal cylPos5ZAxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend, cylClampBottleExtend, doneAtPos4;
		)
->{
/* TODO: Write control-logic */
	
	loop{
		pause;
		await(bottleAtPos4);
		abort(gripperZAxisLowered){//clamp and lower gripper until gripper is fully lowered
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
		}
		
		abort(gripperTurnFinalPos){//steps 3 & 4
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
			||
			{
				sustain capGripperPos5Extend;//grip the cap with gripper
			}
			||
			{
				sustain gripperTurnExtend;//twist the gripper
			}
		}
		
		abort(gripperTurnHomePos){//steps 5 & 6
			{
				sustain cylClampBottleExtend;//clamp bottle
			}
			||
			{
				sustain cylPos5ZAxisExtend;//lower gripper
			}
			||
			{
				sustain gripperTurnRetract;//twist the gripper
			}
		}
		
		abort(gripperZAxisLifted){
			sustain cylClampBottleExtend;//clamp bottle
		}
		
		emit doneAtPos4;
	}

}

Filler(
		input signal bottleAtPos2, dosUnitEvac, dosUnitFilled;
		input signal noz1,noz2,noz3,noz4, sentliquid;
		input int channel liquidBuffer;
		input signal  i_selNoz1, i_selNoz2, i_selNoz3, i_selNoz4;

		output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend, turnNozTrigger, doneAtPos2,  nozBusy, requestliquid;
		)
->{
/* TODO: Write control-logic */
	loop{
		pause;
		await(bottleAtPos2 && !turnNozTrigger);
		abort(dosUnitFilled){
			{sustain valveInjectorOnOff;}
			||
			{
				present(dosUnitEvac){
					sustain dosUnitValveRetract;
				}
			}
			
		}
		
		abort(dosUnitEvac){
			{sustain valveInletOnOff;}
			||
			{
				sustain dosUnitValveExtend;
			}
		}
		emit doneAtPos2;
	}
	||
	loop{
		pause;
		emit requestliquid;
		present(!sentliquid){
			receive liquidBuffer;
			{
			
				abort(dosUnitEvac){
					sustain nozBusy;
				}
			}
			||
			{
				if((int)#liquidBuffer == 1) {
					
						abort(noz1){
							sustain turnNozTrigger;
						}
						await(noz1 && dosUnitEvac);
				}else if((int)#liquidBuffer == 2){
					
						abort(noz2){
							sustain turnNozTrigger;
						}
						await(noz2 && dosUnitEvac);
				}else if((int)#liquidBuffer == 3){
					
						abort(noz3){
							sustain turnNozTrigger;
						}
						await(noz3 && dosUnitEvac);
				}else if((int)#liquidBuffer == 4){
					
						abort(noz4){
							sustain turnNozTrigger;
						}
						await(noz4 && dosUnitEvac);
				}
			}
		}
	}
//	loop{
//		pause;
//		await(i_selNoz1 || i_selNoz2 || i_selNoz3 || i_selNoz4);
//		present(i_selNoz1){
//			abort(noz1){
//				sustain turnNozTrigger;
//			}
//		}
//		present(i_selNoz2){
//			abort(noz2){
//				sustain turnNozTrigger;
//			}
//		}
//		present(i_selNoz3){
//			abort(noz3){
//				sustain turnNozTrigger;
//			}
//		}
//		present(i_selNoz4){
//			abort(noz4){
//				sustain turnNozTrigger;
//			}
//		}
//		
//	}
}

GUIReader(
		input signal placeOrder, liquid1, liquid2, liquid3, liquid4, requestliquid;
		output int channel liquidBuffer;
		output signal sentliquid;
		)
->{
	FIFO fifo = new FIFO(4);
	loop{
		pause;
		if(requestliquid && !fifo.isEmpty()) {
			send liquidBuffer(fifo.dequeue());
		}
		if(fifo.isEmpty() && requestliquid) {
			emit sentliquid;
		}
	}
	||
	loop{
		pause;
		present(placeOrder){
			if(fifio.isEmpty()) {
				present (liquid1){
					Fifo.enqueue(1);
				}
				present (liquid2){
					Fifo.enqueue(2);
				}
				present (liquid3){
					Fifo.enqueue(3);
				}
				present (liquid4){
					Fifo.enqueue(4);
				}
			}
		}
	}
	
}